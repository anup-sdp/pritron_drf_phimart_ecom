# follwed, https://github.com/phitronio/SDT-Django/tree/main/PhiMart
# Classy Django REST Framework: https://www.cdrf.co/
# my repo: https://github.com/anup-sdp/pritron_drf_phimart_ecom

# live: https://drf-phimart.vercel.app/api/   -   https://drf-phimart.vercel.app/swagger/

"""
Django settings for phi_mart project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

STATIC_ROOT = BASE_DIR / "staticfiles" # ---
STATIC_FILES_DIR = BASE_DIR / 'static'
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"
"""
STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
"""

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')  # using decouple package


# ALLOWED_HOSTS, must add when DEBUG = False
ALLOWED_HOSTS = [
    ".vercel.app",
    'localhost', 
    '127.0.0.1',
    'drf-phimart.vercel.app',  # Add your specific Vercel URL
	'react-phimart-client.vercel.app',
]


# Application definition

INSTALLED_APPS = [
	"whitenoise.runserver_nostatic", #
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	#
	'drf_yasg', # yasg: Yet Another Swagger Generator. https://drf-yasg.readthedocs.io/en/stable/readme.html
	'rest_framework',
	'rest_framework_simplejwt',
	
	"debug_toolbar",  # https://django-debug-toolbar.readthedocs.io/en/latest/installation.html
	'djoser',
	'django_filters',
	'cloudinary',
	'cloudinary_storage',
	"django.contrib.sites", # --------
	'corsheaders', # for react frontend 
	#
	'api',
	'orders',
	'products',
	'users',	
]

MIDDLEWARE = [
	'corsheaders.middleware.CorsMiddleware',  # --- at top
	"debug_toolbar.middleware.DebugToolbarMiddleware", # ---
    'django.middleware.security.SecurityMiddleware',
	"whitenoise.middleware.WhiteNoiseMiddleware", # ---
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'phi_mart.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'phi_mart.wsgi.app' # changed from application to app for vercel


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

"""
# default initial database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
"""

# supabase postgresql database (at anupbarua30@gmail.com):
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('dbname'),
        'USER': config('user'), # name.project_id 
        'PASSWORD': config('password'), # supabase project password
        'HOST': config('host'),
        'PORT': config('port')
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -------------------------------------------------------------

AUTH_USER_MODEL = 'users.User'

INTERNAL_IPS = ["127.0.0.1",]  # The Debug Toolbar is shown only if your IP address is listed in Djangoâ€™s INTERNAL_IPS

#from rest_framework.permissions import IsAuthenticated
REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,  # dont convert decimal to string
    'DEFAULT_AUTHENTICATION_CLASSES': (        
        'rest_framework.authentication.SessionAuthentication',  # 1. SessionAuthentication for the browsable API        
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # 2. JWTAuthentication for token-based clients		
    ),
	'DEFAULT_PERMISSION_CLASSES': [
        #'rest_framework.permissions.IsAuthenticated',
		'rest_framework.permissions.AllowAny', # default
		#'rest_framework.permissions.IsAuthenticatedOrReadOnly',
		# 'rest_framework.permissions.IsAdminUser',
		# 'rest_framework.permissions.DjangoModelPermissions',
		# 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
		# 'myapp.permissions.IsEditor', # custom permision
    ],
	'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,  # eg. Max 10 products per page
}



SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),	# --------------------------------------------
	# ^ When making authenticated requests, Authorization: JWT <token> , instead of Authorization: Bearer <token> , 'AUTH_HEADER_TYPES': ('JWT', 'Bearer')	Accepts both formats
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),    
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
	"UPDATE_LAST_LOGIN": True,
}

# http://localhost:5173/
DJOSER = {
	'EMAIL_FRONTEND_PROTOCOL': config('EMAIL_FRONTEND_PROTOCOL', default="http"), # --- update after deployment
	'EMAIL_FRONTEND_DOMAIN': config('EMAIL_FRONTEND_DOMAIN',  default="localhost:5173"), # ---
	'EMAIL_FRONTEND_SITE_NAME':'PhiMart', # ---
	'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True, # -----
    'SERIALIZERS': {
        'user_create': 'users.serializers.UserCreateSerializer',  # http://127.0.0.1:8000/api/auth/users/
        'current_user': 'users.serializers.UserSerializer', # http://127.0.0.1:8000/api/auth/users/me
    },
}

SITE_ID = 1

# Update DJOSER configuration for production
# DJOSER.update({
#     "DOMAIN": config("API_DOMAIN", default="drf-phimart.vercel.app"),  # Update this, give frontend domain
#     "SITE_NAME": "PhiMart API",
# })

SWAGGER_SETTINGS = {  # module 25.4
   'SECURITY_DEFINITIONS': {
      'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
			'description': 'Enter your JWT token in the format: `JWT <your_token>`'
      }
   },   
}

# for sending email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend" # dev testing only
#EMAIL_BACKEND = 'users.email_backends.CustomEmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = config('EMAIL_HOST_USER')  # sender's email-id
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD') # password associated with above email-id/google app password (not the regular password)

DEFAULT_FROM_EMAIL = "phimart_app"

# for user account email activation
# FRONTEND_URL = config('FRONTEND_URL', default='http://127.0.0.1:8000')  # development ----------------------
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:5173')
BACKEND_URL = config("BACKEND_URL", default='https://drf-phimart.vercel.app/') # https://drf-phimart.vercel.app/api/
# Update FRONTEND_URL for email links
# FRONTEND_URL = config('FRONTEND_URL', default='https://your-react-frontend.vercel.app')  # Update when you deploy frontend

# CORS Configuration - Update this section
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # React dev server
    "https://localhost:5173",  # React dev server with HTTPS
    "http://127.0.0.1:8000",  # Django local server
    "https://drf-phimart.vercel.app",  # Your Vercel backend
    # Add your React frontend URL when deployed
	"https://react-phimart-client.vercel.app",
    # "https://your-react-app.vercel.app",  
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "https://drf-phimart.vercel.app",
    # Add other production domains
	"https://react-phimart-client.vercel.app",
]

# CORS_ALLOW_ALL_ORIGINS = True  # Use only in development
CORS_ALLOW_CREDENTIALS = True 
# ^ If your frontend needs to send credentials like cookies or authentication headers
# ^ dont allow CORS_ALLOW_ALL_ORIGINS if use this

# If using custom headers:
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Add these for better Vercel compatibility
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours


import cloudinary
import cloudinary.uploader
from cloudinary.utils import cloudinary_url

# cloudinary Configuration       
cloudinary.config( 
    cloud_name = "didgrik0m", 
    api_key = "767657668879994", 
    api_secret = config('CLOUDINARY_API_SECRET'), # Click 'View API Keys' above to copy your API secret
    secure=True
)
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# CLOUDINARY_URL=cloudinary://<API_KEY>:<API_SECRET>@<CLOUD_NAME> # use this in .env replacing by values


"""
djoser,
Token Obtain Pair:
http://127.0.0.1:8000/api/auth/jwt/create
email:anup@example.com
password:aB@12345
----
HTTP 200 OK
Allow: POST, OPTIONS
Content-Type: application/json
Vary: Accept

{
    "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc1MzczNDg2MiwiaWF0IjoxNzUzNjQ4NDYyLCJqdGkiOiI5MjA5ZDBkNGMwY2Y0N2YwYTFkMjhhOGIzMTE3OGM2ZSIsInVzZXJfaWQiOiIyIn0.k2PNVv-cjYaIXesbyw9UbSQZZb1cD78cCJcoAJot2fQ",
    "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzUzNzM0ODYyLCJpYXQiOjE3NTM2NDg0NjIsImp0aSI6ImY2Y2RmNzAyMThhZTQ4MWNhYzg5NGEwZjIwNmFjNGU1IiwidXNlcl9pZCI6IjIifQ.hYGl8nxcnOrzK3SHhjFk8CRTI-SBPR6ZKOyeCLhokQE"
}

refresh token:
http://127.0.0.1:8000/api/auth/jwt/refresh
"""

"""
simple jwt only:
http://127.0.0.1:8000/api/token/
http://127.0.0.1:8000/api/token/refresh/
"""